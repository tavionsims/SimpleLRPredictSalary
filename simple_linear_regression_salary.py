# -*- coding: utf-8 -*-
"""Simple_Linear_Regression_Salary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VmJfC0RBHexLT_OUI6SQIseMSOLV8YRe
"""

# import all the libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Be sure you've uploaded your Salary_Data.csv file to session/temporary storage in Colab, then read the dataset using pandas
data = pd.read_csv('Salary_Data.csv')

# This displays the top 5 rows of the data
data.head()

# Provides information regarding the columns in the data, 30 'non-null' means all rows have data
data.info()

# descriptive statistics of the dataset
data.describe()

# These Plots help to show the values and how they are scattered, this plot uses Seaborn

plt.figure(figsize=(12,6))
sns.pairplot(data,x_vars=['YearsExperience'],y_vars=['Salary'],height=7,kind='scatter')
plt.xlabel('Years')
plt.ylabel('Salary')
plt.title('Salary Prediction')
plt.show()

#this plot uses matplotlib only
data.plot(x='YearsExperience', y='Salary', style='o')
plt.title('Salary Prediction')
plt.xlabel('Years')
plt.ylabel('Salary')
plt.show()

# Create a new Pandas dataframe X for the feature
X = data[['YearsExperience']]
X.head()

#what is the datatype of X?
type(X)

# Create a new Pandas Series y for the dependent variable/target
y = data['Salary']
y.head()

#what is the datatype of y?
type(y)

# Import train_test_split from scikit learn
from sklearn.model_selection import train_test_split

# Split the data for train and test
X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.2,random_state=0)

# Import Linear Regression model from scikit learn
from sklearn.linear_model import LinearRegression

# Fitting the model
lr = LinearRegression()
lr.fit(X_train,y_train)

# Predicting the Salary for the Test values
y_pred = lr.predict(X_test)

# Plotting the actual vs predicted values

c = [i for i in range (1,len(y_test)+1,1)]
plt.plot(c,y_test,color='r',linestyle='-')
plt.plot(c,y_pred,color='b',linestyle='-')
plt.xlabel('Salary')
plt.ylabel('index')
plt.title('Prediction')
plt.show()

# plotting the error
c = [i for i in range(1,len(y_test)+1,1)]
plt.plot(c,y_test-y_pred,color='green',linestyle='-')
plt.xlabel('index')
plt.ylabel('Error')
plt.title('Error Value')
plt.show()

#Accuracy metrics from scikit learn
from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('r square :' , metrics.r2_score(y_test, y_pred))

# Plot actual and predicted values
plt.figure(figsize=(12,6))
plt.scatter(y_test,y_pred,color='r',linestyle='-')
plt.show()

# Intercept and coefficient of the line
print('Intercept of the model:',lr.intercept_)
print('Coefficient of the line:',lr.coef_)

